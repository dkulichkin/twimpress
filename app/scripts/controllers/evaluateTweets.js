// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  angular.module('twimpressApp').controller('EvaluateTweetsCtrl', [
    '$scope', '$http', '$timeout', '$interval', '$sce', 'socket', '$rootScope', function($scope, $http, $timeout, $interval, $sce, socket, $rootScope) {
      var evaluationBar, searchButtonText, tweetsContainer, userContainer;
      searchButtonText = $sce.trustAsHtml("Search");
      userContainer = angular.element('.user-container');
      evaluationBar = angular.element('.evaluation-bar');
      tweetsContainer = angular.element('.tweets-table').parent();
      $scope.isUserSigned = false;
      $scope.searchButtonText = searchButtonText;
      $scope.evaluationStarted = false;
      $scope.showResults = false;
      $scope.evaluationBarLevel = 0;
      $scope.attention = 0;
      $scope.inputPlaceHolder = "Please sign in to start";
      socket.forward('data', $scope);
      $scope.$on('socket:data', function(ev, data) {
        if (data.poorSignal < 50) {
          if (data != null ? data.attention : void 0) {
            return $scope.attention = data.attention;
          }
        }
      });
      $rootScope.$on("signed", function() {
        $scope.isUserSigned = true;
        return $scope.inputPlaceHolder = "Enter search query";
      });
      $scope.doSearch = function() {
        $scope.searchButtonText = $sce.trustAsHtml('<i class="fa fa-refresh fa-spin"></i>');
        return $http.jsonp('http://127.0.0.1:8080/getTweets?callback=JSON_CALLBACK', {
          params: {
            q: $scope.searchTerm
          }
        }).success(function(body) {
          $scope.Users = body;
          if ($scope.Users.length > 0) {
            return $scope.startEvaluation();
          }
        }).error(function() {
          return console.log(arguments);
        })["finally"](function() {
          $scope.searchButtonText = searchButtonText;
          return $scope.searchTerm = "";
        });
      };
      $scope.startEvaluation = function() {
        var displayNextUser, hideCurrentUser, processNextUser, showNextUser;
        $scope.evaluationStarted = true;
        processNextUser = function(i) {
          var tweetAnimationItemIndex, tweetsListAnimationTimer, tweetsToPaste;
          if ($scope.attention > 65 && $scope.evaluationBarLevel >= 100) {
            $scope.attention = 50;
          }
          $scope.evaluationBarLevel = 0;
          tweetsToPaste = $scope.Users[i].tweets;
          userContainer.removeClass("success error");
          tweetsContainer.css({
            minHeight: tweetsToPaste.length * 79 + "px"
          });
          evaluationBar.addClass("ng-hide");
          $scope.Users[i].tweets = [];
          $scope.currentUser = $scope.Users[i];
          tweetAnimationItemIndex = 0;
          return tweetsListAnimationTimer = $interval(function() {
            if (tweetAnimationItemIndex < tweetsToPaste.length) {
              $scope.currentUser.tweets.push(tweetsToPaste[tweetAnimationItemIndex]);
              return tweetAnimationItemIndex++;
            } else {
              $interval.cancel(tweetsListAnimationTimer);
              evaluationBar.width(userContainer.height()).removeClass("ng-hide");
              return showNextUser(i);
            }
          }, 200);
        };
        showNextUser = function(i) {
          var currentUser, evaluationTimer, timeoutInterval;
          $scope.cycleStart = new Date();
          currentUser = $scope.currentUser;
          currentUser.averageAttention = 0;
          currentUser.evaluationCyclePasses = 0;
          timeoutInterval = currentUser.tweets.length * 4;
          return evaluationTimer = $interval(function() {
            var evaluationFinishedClass;
            if ((new Date() - $scope.cycleStart) / 1000 > timeoutInterval || $scope.evaluationBarLevel >= 100) {
              evaluationFinishedClass = $scope.evaluationBarLevel >= 100 ? "success" : "error";
              userContainer.toggleClass(evaluationFinishedClass);
              currentUser.evaluationFinishedClass = evaluationFinishedClass;
              currentUser.averageAttention = Math.floor(currentUser.averageAttention / currentUser.evaluationCyclePasses);
              $interval.cancel(evaluationTimer);
              return $timeout(function() {
                return displayNextUser(i + 1);
              }, 2000);
            } else {
              currentUser.averageAttention += $scope.attention;
              currentUser.evaluationCyclePasses++;
              if ($scope.evaluationBarLevel < 100 && $scope.attention > 65) {
                return $scope.evaluationBarLevel += 10 / currentUser.tweets.length;
              }
            }
          }, 100);
        };
        hideCurrentUser = function(i, callback) {
          var tweets, tweetsListAnimationTimer;
          if ($scope.currentUser) {
            tweets = $scope.currentUser.tweets;
            return tweetsListAnimationTimer = $interval(function() {
              if ($scope.currentUser.tweets.length) {
                return $scope.currentUser.tweets.pop();
              } else {
                $interval.cancel(tweetsListAnimationTimer);
                $scope.currentUser.tweets = tweets;
                if (typeof callback === "function") {
                  return callback(i);
                }
              }
            }, 100);
          } else {
            if (typeof callback === "function") {
              return callback(i);
            }
          }
        };
        return (displayNextUser = function(i) {
          if ($scope.Users[i]) {
            if ($scope.Users[i].tweets.length) {
              return hideCurrentUser(i, processNextUser);
            } else {
              return displayNextUser(i + 1);
            }
          } else {
            return hideCurrentUser(i, function() {
              $scope.currentUser = null;
              $scope.showResults = true;
              return $scope.evaluationStarted = false;
            });
          }
        })(0);
      };
      $scope.getDate = function(date) {
        return new Date(date);
      };
      return $scope.backToNewSearch = function() {
        return $scope.showResults = false;
      };
    }
  ]);

}).call(this);

/*
//@ sourceMappingURL=evaluateTweets.map
*/
